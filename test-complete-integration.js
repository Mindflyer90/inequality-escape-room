#!/usr/bin/env node

/**
 * Complete integration test for Inequality Escape Room
 * Tests the full user journey with Claude-powered features
 */

const API_URL = process.env.API_URL || 'http://localhost:3000';

async function testCompleteIntegration() {
  console.log('üéÆ Complete Integration Test - Inequality Escape Room\n');
  console.log('Testing full user journey with Claude Sonnet 4.5\n');
  console.log('‚ïê'.repeat(60));

  try {
    // Step 1: Start a new game
    console.log('\nüìç STEP 1: Starting new game (generating puzzle)');
    console.log('‚îÄ'.repeat(60));
    
    const puzzleResponse = await fetch(`${API_URL}/api/puzzle/generate`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ difficulty: 'medium' })
    });
    
    const puzzle = await puzzleResponse.json();
    console.log(`‚úì Puzzle generated by: ${puzzle.generatedBy}`);
    console.log(`  Inequality: ${puzzle.inequality}`);
    console.log(`  Solution: ${puzzle.solution}`);
    console.log(`  Difficulty: ${puzzle.difficulty}`);
    
    if (puzzle.steps && puzzle.steps.length > 0) {
      console.log(`  Steps provided: ${puzzle.steps.length}`);
    }

    // Step 2: Request first hint
    console.log('\nüìç STEP 2: Player requests first hint');
    console.log('‚îÄ'.repeat(60));
    
    const hint1Response = await fetch(`${API_URL}/api/hint/generate`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        puzzleId: puzzle.id,
        inequality: puzzle.inequality,
        hintsUsed: 0
      })
    });
    
    const hint1 = await hint1Response.json();
    console.log(`‚úì First hint received (${hint1.hintsRemaining} remaining)`);
    console.log(`  "${hint1.hint.substring(0, 100)}..."`);

    // Step 3: Request second hint
    console.log('\nüìç STEP 3: Player requests second hint');
    console.log('‚îÄ'.repeat(60));
    
    const hint2Response = await fetch(`${API_URL}/api/hint/generate`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        puzzleId: puzzle.id,
        inequality: puzzle.inequality,
        hintsUsed: 1
      })
    });
    
    const hint2 = await hint2Response.json();
    console.log(`‚úì Second hint received (${hint2.hintsRemaining} remaining)`);
    console.log(`  "${hint2.hint.substring(0, 100)}..."`);

    // Step 4: Submit incorrect answer
    console.log('\nüìç STEP 4: Player submits incorrect answer');
    console.log('‚îÄ'.repeat(60));
    
    const wrongAnswer = 'x > 999';
    const wrongResponse = await fetch(`${API_URL}/api/puzzle/validate`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        puzzleId: puzzle.id,
        answer: wrongAnswer
      })
    });
    
    const wrongResult = await wrongResponse.json();
    console.log(`‚úì Answer validated: ${wrongResult.correct ? 'CORRECT' : 'INCORRECT'}`);
    console.log(`  Feedback: "${wrongResult.message}"`);

    // Step 5: Request third hint
    console.log('\nüìç STEP 5: Player requests third (final) hint');
    console.log('‚îÄ'.repeat(60));
    
    const hint3Response = await fetch(`${API_URL}/api/hint/generate`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        puzzleId: puzzle.id,
        inequality: puzzle.inequality,
        hintsUsed: 2
      })
    });
    
    const hint3 = await hint3Response.json();
    console.log(`‚úì Third hint received (${hint3.hintsRemaining} remaining)`);
    console.log(`  "${hint3.hint.substring(0, 100)}..."`);

    // Step 6: Submit correct answer
    console.log('\nüìç STEP 6: Player submits correct answer');
    console.log('‚îÄ'.repeat(60));
    
    const correctResponse = await fetch(`${API_URL}/api/puzzle/validate`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        puzzleId: puzzle.id,
        answer: puzzle.solution
      })
    });
    
    const correctResult = await correctResponse.json();
    console.log(`‚úì Answer validated: ${correctResult.correct ? 'CORRECT ‚ú®' : 'INCORRECT'}`);
    console.log(`  Feedback: "${correctResult.message}"`);

    // Step 7: Try to request hint after limit
    console.log('\nüìç STEP 7: Player tries to request hint after limit');
    console.log('‚îÄ'.repeat(60));
    
    const hint4Response = await fetch(`${API_URL}/api/hint/generate`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        puzzleId: puzzle.id,
        inequality: puzzle.inequality,
        hintsUsed: 3
      })
    });
    
    if (hint4Response.ok) {
      console.log('‚úó Should have been rejected');
    } else {
      const error = await hint4Response.json();
      console.log(`‚úì Request properly rejected`);
      console.log(`  Error: "${error.message}"`);
    }

    // Summary
    console.log('\n' + '‚ïê'.repeat(60));
    console.log('üéâ COMPLETE INTEGRATION TEST PASSED!');
    console.log('‚ïê'.repeat(60));
    console.log('\n‚úÖ All user journey steps completed successfully:');
    console.log('   1. Puzzle generation (Claude-powered)');
    console.log('   2. First hint request');
    console.log('   3. Second hint request');
    console.log('   4. Incorrect answer submission');
    console.log('   5. Third hint request');
    console.log('   6. Correct answer submission');
    console.log('   7. Hint limit enforcement');
    console.log('\nüöÄ The application is ready for use!');
    console.log('   Frontend: http://localhost:5173');
    console.log('   Backend:  http://localhost:3000');
    
    process.exit(0);
  } catch (error) {
    console.error('\n‚ùå Integration test failed:', error.message);
    console.error('\nStack trace:', error.stack);
    process.exit(1);
  }
}

testCompleteIntegration();
